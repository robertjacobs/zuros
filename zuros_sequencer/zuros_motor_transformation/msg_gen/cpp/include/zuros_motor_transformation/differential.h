/* Auto-generated by genmsg_cpp for file /home/robot/git/zuros/zuros_sequencer/zuros_motor_transformation/msg/differential.msg */
#ifndef ZUROS_MOTOR_TRANSFORMATION_MESSAGE_DIFFERENTIAL_H
#define ZUROS_MOTOR_TRANSFORMATION_MESSAGE_DIFFERENTIAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace zuros_motor_transformation
{
template <class ContainerAllocator>
struct differential_ {
  typedef differential_<ContainerAllocator> Type;

  differential_()
  : left_motor_speed(0.0)
  , right_motor_speed(0.0)
  {
  }

  differential_(const ContainerAllocator& _alloc)
  : left_motor_speed(0.0)
  , right_motor_speed(0.0)
  {
  }

  typedef float _left_motor_speed_type;
  float left_motor_speed;

  typedef float _right_motor_speed_type;
  float right_motor_speed;


  typedef boost::shared_ptr< ::zuros_motor_transformation::differential_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zuros_motor_transformation::differential_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct differential
typedef  ::zuros_motor_transformation::differential_<std::allocator<void> > differential;

typedef boost::shared_ptr< ::zuros_motor_transformation::differential> differentialPtr;
typedef boost::shared_ptr< ::zuros_motor_transformation::differential const> differentialConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::zuros_motor_transformation::differential_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::zuros_motor_transformation::differential_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace zuros_motor_transformation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::zuros_motor_transformation::differential_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::zuros_motor_transformation::differential_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::zuros_motor_transformation::differential_<ContainerAllocator> > {
  static const char* value() 
  {
    return "64774e203c8f0b9062c05b152b874c89";
  }

  static const char* value(const  ::zuros_motor_transformation::differential_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x64774e203c8f0b90ULL;
  static const uint64_t static_value2 = 0x62c05b152b874c89ULL;
};

template<class ContainerAllocator>
struct DataType< ::zuros_motor_transformation::differential_<ContainerAllocator> > {
  static const char* value() 
  {
    return "zuros_motor_transformation/differential";
  }

  static const char* value(const  ::zuros_motor_transformation::differential_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::zuros_motor_transformation::differential_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 left_motor_speed\n\
float32 right_motor_speed\n\
\n\
";
  }

  static const char* value(const  ::zuros_motor_transformation::differential_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::zuros_motor_transformation::differential_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::zuros_motor_transformation::differential_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.left_motor_speed);
    stream.next(m.right_motor_speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct differential_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zuros_motor_transformation::differential_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::zuros_motor_transformation::differential_<ContainerAllocator> & v) 
  {
    s << indent << "left_motor_speed: ";
    Printer<float>::stream(s, indent + "  ", v.left_motor_speed);
    s << indent << "right_motor_speed: ";
    Printer<float>::stream(s, indent + "  ", v.right_motor_speed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ZUROS_MOTOR_TRANSFORMATION_MESSAGE_DIFFERENTIAL_H

