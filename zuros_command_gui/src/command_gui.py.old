#!/usr/bin/python
import roslib
roslib.load_manifest('zuros_command_gui')
import thread
import pygtk
pygtk.require('2.0')
import gtk
import os
import pynotify
import sys 
import signal
import rospy
from std_msgs.msg import Float32

## Implementation of zuros command gui
class CommandGUI():
	def delete_event(self, widget, event, data=None):
		gtk.main_quit()
		return False

	def button_callback(self, widget, data=None):
		print "%s was pressed" % data

	def __init__(self):
		# init ros node
		rospy.init_node('zuros_command_gui')

		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_title("zuros command gui")

		# Delete and destroy events
		self.window.connect("destroy", lambda wid: gtk.main_quit())
		self.window.connect("delete_event", lambda a1,a2:gtk.main_quit())

		# Sets the border width of the window.
		self.window.set_border_width(10)

		self.window.set_size_request(240, 200)

		main_vbox = gtk.VBox(False, 0)
        	self.window.add(main_vbox)
        	main_vbox.show()

		frame_vert = gtk.Frame()
		main_vbox.pack_start(frame_vert, True, True, 10)
		hbox = gtk.HBox(False, 0)
		hbox.set_border_width(10)
		frame_vert.add(hbox)

		frame = gtk.Frame("Control buttons")
		frame.set_label_align( 0, 0.5)

		bbox = gtk.VButtonBox()
		bbox.set_border_width(5)
		bbox.set_layout(gtk.BUTTONBOX_START)
		bbox.set_spacing(5)

		frame.add(bbox)

		button = gtk.Button(stock=gtk.STOCK_OK)
		button.connect("clicked", self.button_callback, "hello")
		bbox.add(button)

		hbox.pack_start(frame)
		self.window.show_all()

	def UpdateLabelVoltage(self, value):
		self.label_voltage.set_text(value)

def signal_handler(signal, frame):
	print 'Program stopped manually...'
	gtk.main_quit()

def main():
	gtk.main()
	return 0

class TheProgram(object):
	def __init__(self):
		pass
		
	def CallbackVoltage(self, data):
		print "callback"
		self.program.UpdateLabelVoltage(data)

	def Start(self):
		self.program = CommandGUI()

if __name__ == "__main__":
	signal.signal(signal.SIGINT, signal_handler)

	program = TheProgram()

	program.Start()
	main()
